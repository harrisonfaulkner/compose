services:

  sonarr:
    image: ghcr.io/hotio/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /opt/sonarr:/config
      - "nfsmountCC:/mnt/"
    ports:
      - 8989:8989
    restart: unless-stopped
  radarr:
    image: ghcr.io/hotio/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - "nfsmountCC:/mnt/"
      - /opt/radarr:/config
    ports:
      - 7878:7878
    restart: unless-stopped

  sabnzbd:
    image: ghcr.io/hotio/sabnzbd
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /opt/sabnzbd:/config
      - "nfsmountCC:/mnt/"
    ports:
      - 8080:8080
    restart: unless-stopped


  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=Asia/Tokyo
      - PORT=5055 #optional
    ports:
      - 5055:5055
    volumes:
      - /opt/overseerr:/app/config
    restart: unless-stopped

  prowlarr:
    image: ghcr.io/hotio/prowlarr
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /opt/prowlarr/data:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  freshrss:
    image: freshrss/freshrss:latest
    container_name: freshrss
    ports:
      - "8585:80"
    environment:
      - TRUSTED_PROXY=10.10.10.20/32
      - TZ=Etc/UTC
      - CRON_MIN=*/20
    volumes:
      - /opt/freshrss/data:/var/www/FreshRSS/data
      - /opt/freshrss/extensions:/var/www/FreshRSS/extensions
    restart: unless-stopped

  beszel:
    image: henrygd/beszel:latest
    container_name: beszel
    restart: unless-stopped
    ports:
      - 8090:8090
    volumes:
      - ./beszel_data:/beszel_data
      - ./beszel_socket:/beszel_socket

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host
    volumes:
      - ./beszel_agent_data:/var/lib/beszel-agent
      - ./beszel_socket:/beszel_socket
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      LISTEN: /beszel_socket/beszel.sock
      HUB_URL: http://localhost:8090
      TOKEN: 1b1b-09d50680aa-487-22b0ba333
      KEY: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGWK6ZR10Lu2Syc2Nbcv1+W3ylMw2ai7NF+uUGsqnOYw"

  homebridge:
    image: homebridge/homebridge:latest
    container_name: homebridge
    restart: always
    network_mode: host
    volumes:
      - ./volumes/homebridge:/homebridge
    logging:
      driver: json-file
      options:
        max-size: "10mb"
        max-file: "1"

  scrypted:
      environment:
          - SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION=Bearer ${WATCHTOWER_HTTP_API_TOKEN:-env_missing_fallback}
          - SCRYPTED_WEBHOOK_UPDATE=http://localhost:10444/v1/update
      image: ghcr.io/koush/scrypted
      volumes:
          - ./volume:/server/volume
#      devices: [
      container_name: scrypted
      restart: unless-stopped
      network_mode: host
      logging:
          driver: "none"
      labels:
          - "com.centurylinklabs.watchtower.scope=scrypted"
      dns:
          - ${SCRYPTED_DNS_SERVER_0:-192.168.1.1}
  watchtower:
      environment:
          - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN:-env_missing_fallback}
          - WATCHTOWER_HTTP_API_UPDATE=true
          - WATCHTOWER_SCOPE=scrypted
          - WATCHTOWER_HTTP_API_PERIODIC_POLLS=${WATCHTOWER_HTTP_API_PERIODIC_POLLS:-true}
      image: containrrr/watchtower
      container_name: scrypted-watchtower
      restart: unless-stopped
      volumes:
          - /var/run/docker.sock:/var/run/docker.sock
      labels:
          - "com.centurylinklabs.watchtower.scope=scrypted"
      ports:
          - 10444:8080
      command: --interval 3600 --cleanup --scope scrypted
      dns:
            - ${SCRYPTED_DNS_SERVER_0:-192.168.1.1}

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro  # Mount the Telegraf configuration file
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket to collect Docker metrics
    depends_on:
      - influxdb
      - nginx
    links:
      - influxdb
      - nginx
    ports:
      - '8125:8125'  # Expose Telegraf's StatsD port
    networks:
      - monitoring  # Connect the Telegraf container to the monitoring network

  telegraf_second:
    image: telegraf
    container_name: telegraf_second
    restart: always
    volumes:
      - ./telegraf/telegraf_second.conf:/etc/telegraf/telegraf.conf:ro  # Mount the second Telegraf configuration file
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
      - '8126:8126'  # Expose the second Telegraf's StatsD port
    networks:
      - monitoring  # Connect the second Telegraf container to the monitoring network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: always
    volumes:
      - ./nginx:/etc/nginx/conf.d  # Mount the Nginx configuration directory
    ports:
      - '8080:80'  # Expose Nginx on port 8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 2
    networks:
      - monitoring  # Connect the Nginx container to the monitoring network

  influxdb:
    image: influxdb:1.8-alpine
    container_name: influxdb
    restart: always
    environment:
      - INFLUXDB_DB=influx
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=1qLU28QPSBm@PH7T
    ports:
      - '8086:8086'  # Expose InfluxDB on port 8086
    volumes:
      - influxdb_data:/var/lib/influxdb  # Mount the InfluxDB data directory
    networks:
      - monitoring  # Connect the InfluxDB container to the monitoring network

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: always
    depends_on:
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=1qLU28QPSBm@PH7T
    links:
      - influxdb
    ports:
      - '3000:3000'  # Expose Grafana on port 3000
    volumes:
      - grafana_data:/var/lib/grafana  # Mount the Grafana data directory
    networks:
      - monitoring  # Connect the Grafana container to the monitoring network


networks:
  monitoring:
    external: true  # Use an external network named 'monitoring'

volumes:
  nfsmountCC:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=192.168.1.10,nolock,soft,rw
      device: ":/mnt/hdd-storage01/hdd-storage01"
  grafana_data: {/opt/grafana}  # Volume for Grafana data
  influxdb_data: {/opt/influx}  # Volume for InfluxDB data
